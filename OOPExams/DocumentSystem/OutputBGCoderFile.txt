using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

public class AudioDocument:MultimediaDocuments
    {
        public long? SampleRate { get; private set; }

         public override void LoadProperty(string key, string value)
        {
            if (key == "samplerate")
            {
                this.SampleRate =long.Parse(value);
            }
            else
            {
                base.LoadProperty(key, value);
            }
        }

        public override void SaveAllProperties(IList<KeyValuePair<string, object>> output)
        {
            output.Add(new KeyValuePair<string, object>("samplerate", this.SampleRate));
        }
    }
    




    public abstract class BinaryDocuments:Document,IDocument
    {
        public long? Size { get; protected set; }

        public override void LoadProperty(string key, string value)
        {
            if (key == "size")
            {
                this.Size = long.Parse(value);
            }
            else
            {
                base.LoadProperty(key, value);
            }
        }

        public override void SaveAllProperties(IList<KeyValuePair<string, object>> output)
        {
            output.Add(new KeyValuePair<string, object>("size", this.Size));
        }
    }


    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Linq;

    public abstract class Document:IDocument
    {
        public string Name { get; protected set; }

        public string Content { get; protected set; }

        public virtual void LoadProperty(string key, string value)
        {
            if (key == "name")
            {
                this.Name = value;
            }
            if (key == "content")
            {
                this.Content = value;
            }
        }

        public virtual void SaveAllProperties(IList<KeyValuePair<string, object>> output)
        {
            output.Add(new KeyValuePair<string,object>("name", this.Name));
            output.Add(new KeyValuePair<string, object>("content", this.Content));
        }

        public override string ToString()
        {
            StringBuilder result = new StringBuilder();

            result.Append(string.Format("{0}", this.GetType().Name));
            result.Append('[');
            IList<KeyValuePair<string, object>> attributes = new List<KeyValuePair<string, object>>();
            SaveAllProperties(attributes);
            foreach (var attr in attributes.OrderBy(x=>x.Key))
            {
                if (attr.Value != null)
                {
                    result.Append(attr.Key);
                    result.Append('=');
                    result.Append(attr.Value);
                    result.Append(';');
                }
            }
            result.Length--;
            result.Append(']');
            return result.ToString();
        }
    }



public interface IDocument
{
	string Name { get; }
	string Content { get; }
	void LoadProperty(string key, string value);
	void SaveAllProperties(IList<KeyValuePair<string, object>> output);
	string ToString();
}

public interface IEditable
{
	void ChangeContent(string newContent);
}

public interface IEncryptable
{
	bool IsEncrypted { get; }
	void Encrypt();
	void Decrypt();
}

public class DocumentSystem
{
    private static IList<IDocument> documents = new List<IDocument>();

    static void Main()
    {
        IList<string> allCommands = ReadAllCommands();
        ExecuteCommands(allCommands);
    }

    private static IList<string> ReadAllCommands()
    {
        List<string> commands = new List<string>();
        while (true)
        {
            string commandLine = Console.ReadLine();
            if (commandLine == "")
            {
                // End of commands
                break;
            }
            commands.Add(commandLine);
        }
        return commands;
    }

    private static void ExecuteCommands(IList<string> commands)
    {
        foreach (var commandLine in commands)
        {
            int paramsStartIndex = commandLine.IndexOf("[");
            string cmd = commandLine.Substring(0, paramsStartIndex);
            int paramsEndIndex = commandLine.IndexOf("]");
            string parameters = commandLine.Substring(
                paramsStartIndex + 1, paramsEndIndex - paramsStartIndex - 1);
            ExecuteCommand(cmd, parameters);
        }
    }

    private static void ExecuteCommand(string cmd, string parameters)
    {
        string[] cmdAttributes = parameters.Split(
            new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
        if (cmd == "AddTextDocument")
        {
            AddTextDocument(cmdAttributes);
        }
        else if (cmd == "AddPDFDocument")
        {
            AddPdfDocument(cmdAttributes);
        }
        else if (cmd == "AddWordDocument")
        {
            AddWordDocument(cmdAttributes);
        }
        else if (cmd == "AddExcelDocument")
        {
            AddExcelDocument(cmdAttributes);
        }
        else if (cmd == "AddAudioDocument")
        {
            AddAudioDocument(cmdAttributes);
        }
        else if (cmd == "AddVideoDocument")
        {
            AddVideoDocument(cmdAttributes);
        }
        else if (cmd == "ListDocuments")
        {
            ListDocuments();
        }
        else if (cmd == "EncryptDocument")
        {
            EncryptDocument(parameters);
        }
        else if (cmd == "DecryptDocument")
        {
            DecryptDocument(parameters);
        }
        else if (cmd == "EncryptAllDocuments")
        {
            EncryptAllDocuments();
        }
        else if (cmd == "ChangeContent")
        {
            ChangeContent(cmdAttributes[0], cmdAttributes[1]);
        }
        else
        {
            throw new InvalidOperationException("Invalid command: " + cmd);
        }
    }
  
    private static void AddTextDocument(string[] attributes)
    {
        AddDocument(attributes, new TextDocument());
    }

    private static void AddPdfDocument(string[] attributes)
    {
        AddDocument(attributes, new PDFDocument ());
    }

    private static void AddDocument(string[] attributes, IDocument doc)
    {
        foreach (var attribute in attributes)
        {
            string[] tokens = attribute.Split('=');
            string propName = tokens[0];
            string propValue = tokens[1];
            doc.LoadProperty(propName, propValue);
            if (doc.Name != null)
            {
                documents.Add(doc);
                Console.WriteLine("Document added: " + doc.Name);
            }
            else
            {
                Console.WriteLine("Document has no name");
            }
        }
    }

    private static void AddWordDocument(string[] attributes)
    {
        AddDocument(attributes, new WordDocument());
    }

    private static void AddExcelDocument(string[] attributes)
    {
        AddDocument(attributes, new ExcelDocument());
    }

    private static void AddAudioDocument(string[] attributes)
    {
        AddDocument(attributes, new AudioDocument());
    }

    private static void AddVideoDocument(string[] attributes)
    {
        AddDocument(attributes, new VideoDocument());
    }

    private static void ListDocuments()
    {
        if (documents.Count==0)
        {
            Console.WriteLine("No documents found");
        }
        else
        {
            foreach (var doc in documents)
            {
                Console.WriteLine(doc);
            }
        }
    }

    private static void EncryptDocument(string name)
    {
        bool found = true;

        foreach (var doc in documents)
        {
            if (doc.Name == name)
            {
                found = true;

                if (doc is IEncryptable)
                {
                    ((IEncryptable)doc).Encrypt();
                    Console.WriteLine("Document encrypted: " + doc.Name);
                }
                else
                {
                    Console.WriteLine("Document does not support encryption: " + doc.Name);
                }
            }
        }

        if (!found)
        {
            Console.WriteLine("Document not found: " + name);
        }
    }

    private static void DecryptDocument(string name)
    {
        bool found = true;

        foreach (var doc in documents)
        {
            if (doc.Name==name)
            {
                found = true;

                if (doc is IEncryptable)
                {
                    ((IEncryptable)doc).Decrypt();
                    Console.WriteLine("Document decrypted: "+doc.Name);
                }
                else
                {
                    Console.WriteLine("Document does not support decryption: "+doc.Name);
                }
            }
        }

        if (!found)
        {
            Console.WriteLine("Document not found: "+name);
        }
    }

    private static void EncryptAllDocuments()
    {
        bool found = true;

        foreach (var doc in documents)
        {

            if (doc is IEncryptable)
            {
                found = true;
                ((IEncryptable)doc).Encrypt();
            }
        }

        if (!found)
        {
            Console.WriteLine("No encryptable documents found" );
        }
        else
        {
            Console.WriteLine("All documents encrypted");
        }
    }

    private static void ChangeContent(string name, string content)
    {
        bool found = true;

        foreach (var doc in documents)
        {
            if (doc.Name == name)
            {
                found = true;

                if (doc is IEditable)
                {
                    ((IEditable)doc).ChangeContent(content);
                    Console.WriteLine("Document content changed: " + doc.Name);
                }
                else
                {
                    Console.WriteLine("Document is not editable: " + doc.Name);
                }
            }
        }

        if (!found)
        {
            Console.WriteLine("Document not found: " + name);
        }
    }
}



    public abstract class EncryptableDocument:BinaryDocuments,IEncryptable
    {
        public bool IsEncrypted { get; private set; }
     
        public void Encrypt()
        {
            this.IsEncrypted = true;
        }

        public void Decrypt()
        {
            this.IsEncrypted = false;
        }

        public override string ToString()
        {
            StringBuilder result = new StringBuilder();

            if (this.IsEncrypted)
            {
                result.Append(string.Format("{0}", this.GetType().Name));
                result.Append("[encrypted]");
                return result.ToString();
            }
            else
            {
                return base.ToString();
            }
        }
    }



    public class ExcelDocument:OfficeDocument
    {
        public long? Rows { get; private set; }
        public long? Cols { get; private set; }

         public override void LoadProperty(string key, string value)
        {
            if (key == "rows")
            {
                this.Rows = long.Parse(value);
            }
            else if (key == "cols")
            {
                this.Rows = long.Parse(value);
            }
            else
            {
                base.LoadProperty(key, value);
            }
        }

        public override void SaveAllProperties(IList<KeyValuePair<string, object>> output)
        {
            output.Add(new KeyValuePair<string, object>("rows", this.Rows));
            output.Add(new KeyValuePair<string, object>("cols", this.Cols));
        }
    }
    




    public abstract class MultimediaDocuments:BinaryDocuments
    {
        public long? Length { get; private set; }

         public override void LoadProperty(string key, string value)
        {
            if (key == "length")
            {
                this.Length = long.Parse(value);
            }
            else
            {
                base.LoadProperty(key, value);
            }
        }

        public override void SaveAllProperties(IList<KeyValuePair<string, object>> output)
        {
            output.Add(new KeyValuePair<string, object>("length", this.Length));
        }
    }
    




    public abstract class OfficeDocument:EncryptableDocument
    {
        public string Version { get; private set; }

         public override void LoadProperty(string key, string value)
        {
            if (key == "version")
            {
                this.Version = value;
            }
            else
            {
                base.LoadProperty(key, value);
            }
        }

        public override void SaveAllProperties(IList<KeyValuePair<string, object>> output)
        {
            output.Add(new KeyValuePair<string, object>("version", this.Version));
        }
    }
    




    public class PDFDocument:EncryptableDocument
    {
        public long? NumberOfPages { get; private set; }

         public override void LoadProperty(string key, string value)
        {
            if (key == "pages")
            {
                this.NumberOfPages = long.Parse(value);
            }
            else
            {
                base.LoadProperty(key, value);
            }
        }

        public override void SaveAllProperties(IList<KeyValuePair<string, object>> output)
        {
            output.Add(new KeyValuePair<string, object>("pages", this.NumberOfPages));
        }
    }
    


    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    public class TextDocument:Document,IEditable
    {
        public string Charset { get;protected set; }

        public override void LoadProperty(string key, string value)
        {
            if (key == "charset")
            {
                this.Charset = value;
            }

            else
            {
                base.LoadProperty(key, value);
            }          
        }

        public override void SaveAllProperties(IList<KeyValuePair<string, object>> output)
        {
            output.Add(new KeyValuePair<string,object>("charset", this.Charset));
            base.SaveAllProperties(output);
        }

        public void ChangeContent(string newContent)
        {
            this.Content = newContent;
        }
    }




    public class VideoDocument:MultimediaDocuments
    {
        public long? FrameRate { get; private set; }

         public override void LoadProperty(string key, string value)
        {
            if (key == "framerate")
            {
                this.FrameRate =long.Parse(value);
            }
            else
            {
                base.LoadProperty(key, value);
            }
        }

        public override void SaveAllProperties(IList<KeyValuePair<string, object>> output)
        {
            output.Add(new KeyValuePair<string, object>("framerate", this.FrameRate));
        }
    }
    




    public class WordDocument:OfficeDocument,IEditable
    {
        public long? Chars { get; private set; }

         public override void LoadProperty(string key, string value)
        {
            if (key == "chars")
            {
                this.Chars = long.Parse(value);
            }
            else
            {
                base.LoadProperty(key, value);
            }
        }

        public override void SaveAllProperties(IList<KeyValuePair<string, object>> output)
        {
            output.Add(new KeyValuePair<string, object>("chars", this.Chars));
        }
        public void ChangeContent(string newContent)
        {
            this.Content = newContent;
        }
    }